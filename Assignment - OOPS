{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "13b421ce-5e3f-495c-9e68-49a1c1dab0cb",
   "metadata": {},
   "source": [
    "                                                     Assignment OOPs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "80b9e67a-e35f-4868-867c-0e7aae8af321",
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "1 What is Object-Oriented Programming (OOP)?\n",
    "Ans OOP is a way of writing code by modeling real-world things as \"objects\" with data (attributes) and \n",
    "actions (methods). It makes code reusable, modular, and organized.\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7b8c2bdf-0c03-43c3-8b80-7c0e7263feec",
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "2 What is a class in OOP?\n",
    "Ans A class is like a blueprint for creating objects. It defines what attributes and behaviors the objects will have.\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e2a86afb-2bab-4bb8-adf6-930a86fb314e",
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "3. What is an object in OOP?\n",
    "Ans: An object is an instance of a class. It holds actual values and can use methods defined in the class.\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6f6f6b21-705c-49d9-96cc-2a62b0c23203",
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "4. What is the difference between abstraction and encapsulation?\n",
    "Ans: Abstraction hides complex logic and shows only what’s necessary. \n",
    "Encapsulation hides internal details by keeping data safe inside classes (using private variables, etc.).\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "487fa595-04de-419c-be66-13e19e061ed5",
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "5. What are dunder methods in Python?\n",
    "Ans: Dunder (double underscore) methods like __init__, __str__, etc., are special methods Python uses internally.\n",
    "They start and end with __.\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "29ff88d9-252b-4322-a7c8-06b04ba70df6",
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "6. Explain the concept of inheritance in OOP.\n",
    "Ans: Inheritance lets one class (child) reuse the code of another class (parent). It helps avoid code repetition.\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "54778ac7-54d7-466e-a5e8-d3e39ddcea61",
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "7. What is polymorphism in OOP?\n",
    "Ans: Polymorphism means using a common interface for different data types. \n",
    "For example, two different classes can have a method with the same name but behave differently.\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d6acef39-5b6d-4fae-8ac2-d17378ebe172",
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "8. How is encapsulation achieved in Python?\n",
    "Ans: By using private (_ or __) variables/methods and accessing them through getters and setters.\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5a21e74d-20f8-4f8a-a1cc-613af0a3c4db",
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "9. What is a constructor in Python?\n",
    "Ans: A constructor is the __init__ method. It runs automatically when an object is created and is used to initialize attributes.\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6016760a-ada2-4fb1-8306-43b62db8c885",
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "10. What are class and static methods in Python?\n",
    "Ans:\n",
    "classmethod: Works with the class, not instance. Gets cls as the first argument.\n",
    "\n",
    "staticmethod: Doesn’t access class or instance. Just a regular function inside a class.\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d4856642-e98f-437a-8ba2-ff6e645005c0",
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "11. What is method overloading in Python?\n",
    "Ans: Python doesn’t support it directly. But we can achieve similar results using default arguments or *args.\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f78e4e4b-bd63-4a69-b041-fa350d782597",
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "12. What is method overriding in OOP?\n",
    "Ans: It means redefining a method in the child class that already exists in the parent class.\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dce7ce91-a89c-4913-89ba-eb0408d2b321",
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "13. What is a property decorator in Python?\n",
    "Ans: Property lets you use a method like an attribute. It’s useful for computed values or read-only properties.\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7d440ddd-fcc6-4cd2-ba1c-a8ebab95d34e",
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "14. Why is polymorphism important in OOP?\n",
    "Ans: It allows different objects to be treated the same way, making code more flexible and easier to scale.\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7c25a3c2-a72a-4ee7-9791-e1ed7e627f68",
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "15. What is an abstract class in Python?\n",
    "Ans: An abstract class is a class that can’t be instantiated directly. It has methods with no implementation (abstractmethod) \n",
    "and is used to define a structure for subclasses.\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "acff462c-2eb2-4348-b3e2-ed454410627e",
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "16. What are the advantages of OOP?\n",
    "Ans: Modular code, easy reuse, better organization, and easier to debug, extend, and maintain.\n",
    "\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "57280b98-b165-432b-9799-abc9512acc8a",
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "17. What is the difference between a class variable and an instance variable?\n",
    "Ans:\n",
    "Class variable: Shared across all objects.\n",
    "\n",
    "Instance variable: Unique for each object.\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "eb0d2d95-c22c-43dd-8f90-7b6d8f9fc313",
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "18. What is multiple inheritance in Python?\n",
    "Ans: A class can inherit from more than one parent class. Python resolves conflicts using MRO (Method Resolution Order).\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bec630dd-5d29-4951-960f-7b649f55ecb4",
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "19. Explain the purpose of __str__ and __repr__ methods in Python.\n",
    "Ans:\n",
    "__str__: Used for readable string output (for users).\n",
    "\n",
    "__repr__: Used for debugging, should return a valid expression to recreate the object.\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "60e4f3de-e070-4457-b0ba-11cee8490902",
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "20. What is the significance of the super() function in Python?\n",
    "Ans: super() lets you call methods from a parent class, especially useful in inheritance.\n",
    "\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ac7df27d-67fa-4eba-8198-a0af8cfc0b0b",
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "21. What is the significance of the __del__ method in Python?\n",
    "Ans: It’s a destructor. It runs when an object is deleted and is used to clean up resources.\n",
    "\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5f37fbad-33a0-4016-b7f0-28df0bcd45b8",
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "22. What is the difference between @staticmethod and @classmethod in Python?\n",
    "Ans:\n",
    "\n",
    "@staticmethod: No access to class or instance.\n",
    "\n",
    "@classmethod: Accesses class (not instance) using cls.\n",
    "\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a9c02582-0b41-404e-82da-c3d94431b095",
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "23. How does polymorphism work in Python with inheritance?\n",
    "Ans: Child classes can override methods from the parent, and we can call the same method on different objects and get different results.\n",
    "\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1492c3e0-e4df-4a38-b09c-02fa2c28e1d8",
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "24. What is method chaining in Python OOP?\n",
    "Ans: It means calling multiple methods in a single line using dots, like obj.method1().method2(). For this, each method must return self.\n",
    "\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ac7e1d98-39e3-471c-9322-e8d704f1e9bf",
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "25. What is the purpose of the __call__ method in Python?\n",
    "Ans: It lets an object act like a function. If defined, you can do obj() and it’ll run __call__.\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1bbc53dd-8884-4141-a9ee-91eff4338281",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "9ddd6119-12a8-4de7-bb64-a10cce460450",
   "metadata": {},
   "source": [
    "Practical Questions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3734178d-bb16-49bb-b89d-a496e9180939",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "b567ef4f-7af8-40b9-a7f1-81abe0467b43",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Bark!\n"
     ]
    }
   ],
   "source": [
    "# 1. Create a parent class Animal with a method speak() that prints a generic message. \n",
    "# Create a child class Dog that overrides the speak() method to print \"Bark!\".\n",
    "\n",
    "class Animal:\n",
    "    def speak(self):\n",
    "        print(\"This animal makes a sound.\")\n",
    "\n",
    "class Dog(Animal):\n",
    "    def speak(self):\n",
    "        print(\"Bark!\")\n",
    "\n",
    "d = Dog()\n",
    "d.speak()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "f1ce27eb-ef89-452f-a578-640d1f087d44",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "28.259999999999998\n",
      "20\n"
     ]
    }
   ],
   "source": [
    "# 2. Write a program to create an abstract class Shape with a method area().\n",
    "# Derive classes Circle and Rectangle from it and implement the area() method in both.\n",
    "\n",
    "from abc import ABC, abstractmethod\n",
    "\n",
    "class Shape(ABC):\n",
    "    @abstractmethod\n",
    "    def area(self):\n",
    "        pass\n",
    "\n",
    "class Circle(Shape):\n",
    "    def __init__(self, r):\n",
    "        self.r = r\n",
    "\n",
    "    def area(self):\n",
    "        return 3.14 * self.r * self.r\n",
    "\n",
    "class Rectangle(Shape):\n",
    "    def __init__(self, w, h):\n",
    "        self.w = w\n",
    "        self.h = h\n",
    "\n",
    "    def area(self):\n",
    "        return self.w * self.h\n",
    "\n",
    "c = Circle(3)\n",
    "r = Rectangle(4, 5)\n",
    "print(c.area())\n",
    "print(r.area())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "80b8d78f-2d9d-48a2-b594-b85daf361ad1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Four Wheeler Tesla 100 kWh\n"
     ]
    }
   ],
   "source": [
    "# 3. Implement a multi-level inheritance scenario where a class Vehicle has an attribute type.\n",
    "# Derive a class Car and further derive a class ElectricCar that adds a battery attribute.\n",
    "\n",
    "class Vehicle:\n",
    "    def __init__(self, type):\n",
    "        self.type = type\n",
    "\n",
    "class Car(Vehicle):\n",
    "    def __init__(self, type, brand):\n",
    "        super().__init__(type)\n",
    "        self.brand = brand\n",
    "\n",
    "class ElectricCar(Car):\n",
    "    def __init__(self, type, brand, battery):\n",
    "        super().__init__(type, brand)\n",
    "        self.battery = battery\n",
    "\n",
    "e = ElectricCar(\"Four Wheeler\", \"Tesla\", \"100 kWh\")\n",
    "print(e.type, e.brand, e.battery)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "e268d152-1164-4814-b34f-6b94d6f93f60",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sparrow can fly.\n",
      "Penguin can't fly.\n"
     ]
    }
   ],
   "source": [
    "# 4. Demonstrate polymorphism by creating a base class Bird with a method fly().\n",
    "# Create two derived classes Sparrow and Penguin that override the fly() method.\n",
    "\n",
    "class Bird:\n",
    "    def fly(self):\n",
    "        print(\"Some birds can fly.\")\n",
    "\n",
    "class Sparrow(Bird):\n",
    "    def fly(self):\n",
    "        print(\"Sparrow can fly.\")\n",
    "\n",
    "class Penguin(Bird):\n",
    "    def fly(self):\n",
    "        print(\"Penguin can't fly.\")\n",
    "\n",
    "b1 = Sparrow()\n",
    "b2 = Penguin()\n",
    "b1.fly()\n",
    "b2.fly()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "6cdafa26-a509-48c9-98d2-60d62f352985",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1200\n"
     ]
    }
   ],
   "source": [
    "# 5. Write a program to demonstrate encapsulation by creating a class BankAccount \n",
    "# with private attributes balance and methods to deposit, withdraw, and check balance.\n",
    "\n",
    "class BankAccount:\n",
    "    def __init__(self, balance):\n",
    "        self.__balance = balance\n",
    "\n",
    "    def deposit(self, amount):\n",
    "        self.__balance += amount\n",
    "\n",
    "    def withdraw(self, amount):\n",
    "        if amount <= self.__balance:\n",
    "            self.__balance -= amount\n",
    "\n",
    "    def check_balance(self):\n",
    "        return self.__balance\n",
    "\n",
    "acc = BankAccount(1000)\n",
    "acc.deposit(500)\n",
    "acc.withdraw(300)\n",
    "print(acc.check_balance())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "68d63356-9cf9-4833-99f6-3ef859d9f11a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Playing guitar\n",
      "Playing piano\n"
     ]
    }
   ],
   "source": [
    "# 6. Demonstrate runtime polymorphism using a method play() in a base class Instrument. \n",
    "# Derive classes Guitar and Piano that implement their own version of play().\n",
    "\n",
    "class Instrument:\n",
    "    def play(self):\n",
    "        print(\"Instrument is playing\")\n",
    "\n",
    "class Guitar(Instrument):\n",
    "    def play(self):\n",
    "        print(\"Playing guitar\")\n",
    "\n",
    "class Piano(Instrument):\n",
    "    def play(self):\n",
    "        print(\"Playing piano\")\n",
    "\n",
    "i1 = Guitar()\n",
    "i2 = Piano()\n",
    "i1.play()\n",
    "i2.play()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "8b8d73f9-2d45-4fa1-820f-b8fee2d357b2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "8\n",
      "6\n"
     ]
    }
   ],
   "source": [
    "# 7. Create a class MathOperations with a class method add_numbers() to add two numbers \n",
    "# and a static method subtract_numbers() to subtract two numbers.\n",
    "\n",
    "class MathOperations:\n",
    "    @classmethod\n",
    "    def add_numbers(cls, a, b):\n",
    "        return a + b\n",
    "\n",
    "    @staticmethod\n",
    "    def subtract_numbers(a, b):\n",
    "        return a - b\n",
    "\n",
    "print(MathOperations.add_numbers(5, 3))\n",
    "print(MathOperations.subtract_numbers(10, 4))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "eeebbdb6-956c-481f-a165-85a7088ef5bb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2\n"
     ]
    }
   ],
   "source": [
    "# 8. Implement a class Person with a class method to count the total number of persons created.\n",
    "\n",
    "class Person:\n",
    "    count = 0\n",
    "\n",
    "    def __init__(self):\n",
    "        Person.count += 1\n",
    "\n",
    "    @classmethod\n",
    "    def total_persons(cls):\n",
    "        return cls.count\n",
    "\n",
    "p1 = Person()\n",
    "p2 = Person()\n",
    "print(Person.total_persons())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "b725a114-8f23-4e88-9bc0-a25b21a48229",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3/5\n"
     ]
    }
   ],
   "source": [
    "# 9. Write a class Fraction with attributes numerator and denominator. \n",
    "# Override the str method to display the fraction as \"numerator/denominator\".\n",
    "\n",
    "class Fraction:\n",
    "    def __init__(self, num, den):\n",
    "        self.num = num\n",
    "        self.den = den\n",
    "\n",
    "    def __str__(self):\n",
    "        return f\"{self.num}/{self.den}\"\n",
    "\n",
    "f = Fraction(3, 5)\n",
    "print(f)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "771f239f-d552-4e06-a4f2-c3691fbbb09a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4, 6\n"
     ]
    }
   ],
   "source": [
    "# 10. Demonstrate operator overloading by creating a class Vector \n",
    "# and overriding the add method to add two vectors.\n",
    "\n",
    "class Vector:\n",
    "    def __init__(self, x, y):\n",
    "        self.x = x\n",
    "        self.y = y\n",
    "\n",
    "    def __add__(self, other):\n",
    "        return Vector(self.x + other.x, self.y + other.y)\n",
    "\n",
    "    def __str__(self):\n",
    "        return f\"{self.x}, {self.y}\"\n",
    "\n",
    "v1 = Vector(1, 2)\n",
    "v2 = Vector(3, 4)\n",
    "v3 = v1 + v2\n",
    "print(v3)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "42426741-6b84-467d-8d91-38d81de515fb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello, my name is Mayank and I am 23 years old.\n"
     ]
    }
   ],
   "source": [
    "# 11. Create a class Person with attributes name and age. \n",
    "# Add a method greet() that prints \"Hello, my name is {name} and I am {age} years old.\"\n",
    "\n",
    "class Person:\n",
    "    def __init__(self, name, age):\n",
    "        self.name = name\n",
    "        self.age = age\n",
    "\n",
    "    def greet(self):\n",
    "        print(f\"Hello, my name is {self.name} and I am {self.age} years old.\")\n",
    "\n",
    "p = Person(\"Mayank\", 23)\n",
    "p.greet()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "2aba2d67-3af3-4c4f-9fd8-38962b34673d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "85.0\n"
     ]
    }
   ],
   "source": [
    "# 12. Implement a class Student with attributes name and grades. \n",
    "# Create a method average_grade() to compute the average of the grades.\n",
    "\n",
    "class Student:\n",
    "    def __init__(self, name, grades):\n",
    "        self.name = name\n",
    "        self.grades = grades\n",
    "\n",
    "    def average_grade(self):\n",
    "        return sum(self.grades) / len(self.grades)\n",
    "\n",
    "s = Student(\"Ankit\", [80, 90, 85])\n",
    "print(s.average_grade())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "b601e1c5-baaf-486c-8bcf-85693afec24a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "24\n"
     ]
    }
   ],
   "source": [
    "# 13. Create a class Rectangle with methods set_dimensions() to set the dimensions \n",
    "# and area() to calculate the area.\n",
    "\n",
    "class Rectangle:\n",
    "    def set_dimensions(self, w, h):\n",
    "        self.w = w\n",
    "        self.h = h\n",
    "\n",
    "    def area(self):\n",
    "        return self.w * self.h\n",
    "\n",
    "r = Rectangle()\n",
    "r.set_dimensions(4, 6)\n",
    "print(r.area())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "9afefa49-9056-4a1c-aa18-7e7f3486e4f2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9000\n"
     ]
    }
   ],
   "source": [
    "# 14. Create a class Employee with a method calculate_salary() that computes the salary \n",
    "# based on hours worked and hourly rate. Create a derived class Manager that adds a bonus to the salary.\n",
    "\n",
    "class Employee:\n",
    "    def calculate_salary(self, hours, rate):\n",
    "        return hours * rate\n",
    "\n",
    "class Manager(Employee):\n",
    "    def calculate_salary(self, hours, rate, bonus):\n",
    "        return super().calculate_salary(hours, rate) + bonus\n",
    "\n",
    "m = Manager()\n",
    "print(m.calculate_salary(40, 100, 5000))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "18581fb3-d2e5-463a-8430-72e085f24b9f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "30\n"
     ]
    }
   ],
   "source": [
    "# 15. Create a class Product with attributes name, price, and quantity. \n",
    "# Implement a method total_price() that calculates the total price of the product.\n",
    "\n",
    "class Product:\n",
    "    def __init__(self, name, price, qty):\n",
    "        self.name = name\n",
    "        self.price = price\n",
    "        self.qty = qty\n",
    "\n",
    "    def total_price(self):\n",
    "        return self.price * self.qty\n",
    "\n",
    "p = Product(\"Pen\", 10, 3)\n",
    "print(p.total_price())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "f1f40184-62f0-40ee-8ddb-f3489b0b4e9d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Moo\n",
      "Baa\n"
     ]
    }
   ],
   "source": [
    "# 16. Create a class Animal with an abstract method sound(). \n",
    "# Create two derived classes Cow and Sheep that implement the sound() method.\n",
    "\n",
    "from abc import ABC, abstractmethod\n",
    "\n",
    "class Animal(ABC):\n",
    "    @abstractmethod\n",
    "    def sound(self):\n",
    "        pass\n",
    "\n",
    "class Cow(Animal):\n",
    "    def sound(self):\n",
    "        print(\"Moo\")\n",
    "\n",
    "class Sheep(Animal):\n",
    "    def sound(self):\n",
    "        print(\"Baa\")\n",
    "\n",
    "c = Cow()\n",
    "s = Sheep()\n",
    "c.sound()\n",
    "s.sound()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "4a4a4d42-e5ca-475e-b39f-16321d21aaaa",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Atomic Habits by James Clear, 2018\n"
     ]
    }
   ],
   "source": [
    "# 17. Create a class Book with attributes title, author, and year_published. \n",
    "# Add a method get_book_info() that returns a formatted string with the book's details.\n",
    "\n",
    "class Book:\n",
    "    def __init__(self, title, author, year):\n",
    "        self.title = title\n",
    "        self.author = author\n",
    "        self.year = year\n",
    "\n",
    "    def get_book_info(self):\n",
    "        return f\"{self.title} by {self.author}, {self.year}\"\n",
    "\n",
    "b = Book(\"Atomic Habits\", \"James Clear\", 2018)\n",
    "print(b.get_book_info())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "3943ff88-ed8b-4d11-b80e-7cea007a0e8e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Delhi 50000000 12\n"
     ]
    }
   ],
   "source": [
    "# 18. Create a class House with attributes address and price. \n",
    "# Create a derived class Mansion that adds an attribute number_of_rooms.\n",
    "\n",
    "class House:\n",
    "    def __init__(self, address, price):\n",
    "        self.address = address\n",
    "        self.price = price\n",
    "\n",
    "class Mansion(House):\n",
    "    def __init__(self, address, price, rooms):\n",
    "        super().__init__(address, price)\n",
    "        self.rooms = rooms\n",
    "\n",
    "m = Mansion(\"Delhi\", 50000000, 12)\n",
    "print(m.address, m.price, m.rooms)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1e254cd3-4b03-45ec-9496-27b2b25ce3c6",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
